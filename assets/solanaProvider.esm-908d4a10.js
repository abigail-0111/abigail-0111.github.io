import{a as h,C as A,d,af as b,W as x,J as T,p as I,_ as q,m as P,a6 as L,c as S}from"./provider-browser-5807d46b.js";import{B as K,d as O}from"./home-86ad132c.js";import{n as N,C as H,b as u,P as M,K as D,V as E}from"./nacl-fast-b95fbcd5.js";import"./index-c463d612.js";import"./_plugin-vue_export-helper-c27b6911.js";import"./bn-07c2e7c8.js";import"./index-8fffa698.js";const y=N.lowlevel;function F(n){let e;typeof n=="string"?e=Buffer.from(n,"hex"):e=n;const s=new Uint8Array(64),a=[y.gf(),y.gf(),y.gf(),y.gf()],r=new Uint8Array([...new Uint8Array(e),...new Uint8Array(32)]),i=new Uint8Array(32);y.crypto_hash(s,r,32),s[0]&=248,s[31]&=127,s[31]|=64,y.scalarbase(a,s),y.pack(i,a);for(let t=0;t<32;t+=1)r[t+32]=i[t];return{sk:Buffer.from(r),pk:Buffer.from(i)}}function J(n){return(e,s,a,r)=>e.method==="solana_chainId"?(s.result=n,r()):a()}function G(n){return(e,s,a,r)=>e.method==="solana_provider_config"?(s.result=n,r()):a()}function $(n){const{chainId:e}=n;return P([J(e),G(n)])}function V(n){const{rpcTarget:e}=n,s=O({rpcTarget:e});return{networkMiddleware:P([$(n),s]),fetchMiddleware:s}}function Q(n){let{getAccounts:e}=n;return S(async(s,a,r)=>{const{method:i}=s;if(i!=="getAccounts")return r();if(!e)throw new Error("WalletMiddleware - opts.getAccounts not provided");const t=await e(s);a.result=t})}function X(n){let{requestAccounts:e}=n;return S(async(s,a,r)=>{const{method:i}=s;if(i!=="requestAccounts")return r();if(!e)throw new Error("WalletMiddleware - opts.requestAccounts not provided");const t=await e(s);a.result=t})}function l(n,e){return S(async(s,a,r)=>{const{method:i}=s;if(i!==n)return r();if(!e)throw new Error(`WalletMiddleware - ${n} not provided`);const t=await e(s);a.result=t})}function _(n){const{getAccounts:e,requestAccounts:s,signTransaction:a,signAndSendTransaction:r,signAllTransactions:i,signMessage:t,getPrivateKey:o,getSecretKey:c}=n;return P([X({requestAccounts:s}),Q({getAccounts:e}),l("signTransaction",a),l("signAndSendTransaction",r),l("signAllTransactions",i),l("signMessage",t),l("solanaPrivateKey",o),l("private_key",o),l("solanaSecretKey",c)])}function Y(n){let{addNewChainConfig:e,switchSolanaChain:s}=n;return P([l("addSolanaChain",e),l("switchSolanaChain",s)])}function Z(n){let{updatePrivatekey:e}=n;return P([l("updateAccount",e)])}class k extends K{constructor(e){let{config:s,state:a}=e;super({config:{chainConfig:h(h({},s.chainConfig),{},{chainNamespace:A.SOLANA})},state:a})}async switchChain(e){throw L.unsupportedOperation("Chain switching is not supported by this adapter")}async setupProvider(e){const s=new T,a=this.getProviderHandlers(e),r=_(a);s.push(r);const i=$(this.config.chainConfig);s.push(i);const t=this.getInjectedProviderProxy(e);t&&s.push(t);const o=I(s);this.updateProviderEngineProxy(o),await this.lookupNetwork()}async lookupNetwork(){const{chainConfig:e}=this.config;return this.update({chainId:e.chainId}),e.chainId||""}getInjectedProviderProxy(e){}}const z=n=>({requestAccounts:async()=>n.publicKey?[u.encode(n.publicKey.toBytes())]:[],getAccounts:async()=>n.publicKey?[u.encode(n.publicKey.toBytes())]:[],getPrivateKey:async()=>{throw d.rpcErrors.methodNotSupported()},getSecretKey:async()=>{throw d.rpcErrors.methodNotSupported()},signTransaction:async s=>await n.signTransaction(s.params.message),signMessage:async s=>(await n.signMessage(s.params.message,s.params.display)).signature,signAllTransactions:async s=>{var a,r;if(!((a=s.params)!==null&&a!==void 0&&a.message)||!((r=s.params)!==null&&r!==void 0&&r.message.length))throw d.rpcErrors.invalidParams("message");return await n.signAllTransactions(s.params.message)},signAndSendTransaction:async s=>({signature:(await n.signAndSendTransaction(s.params.message)).signature})});function B(n){return S(async(e,s,a)=>{const r=await n.request(e);s.result=r})}class ge extends k{getProviderHandlers(e){return z(e)}getInjectedProviderProxy(e){return B(e)}}const C=n=>n.version!==void 0||n instanceof E,j=(n,e)=>({requestAccounts:async()=>{const{data:a}=await n.connect();return[a.publicKey]},getAccounts:async()=>{const{data:a}=await n.connect();return[a.publicKey]},getPrivateKey:async()=>{throw d.rpcErrors.methodNotSupported()},getSecretKey:async()=>{throw d.rpcErrors.methodNotSupported()},signTransaction:async a=>{const r=a.params.message;if(!r)throw d.rpcErrors.invalidRequest({message:"Invalid transaction message"});const i=C(r)?r.message.serialize():r.serializeMessage(),{data:t}=await n.signTransaction(u.encode(i));if(!t.publicKey||!t.signature)throw new Error("Invalid signature from slope wallet");const o=new M(t.publicKey),c=u.decode(t.signature);return r.addSignature(o,Buffer.from(c)),r},signMessage:async a=>{const r=await n.signMessage(a.params.message);return u.decode(r.data.signature)},signAndSendTransaction:async a=>{const r=e();if(!r)throw d.providerErrors.custom({message:"Provider is not initialized",code:4902});const i=a.params.message;if(!i)throw d.rpcErrors.invalidRequest({message:"Invalid transaction message"});const t=C(i)?i.message.serialize():i.serializeMessage(),{data:o}=await n.signTransaction(u.encode(t));if(!o.publicKey||!o.signature)throw new Error("Invalid signature from slope wallet");const c=new M(o.publicKey),g=u.decode(o.signature);i.addSignature(c,Buffer.from(g));const m=await r.request({method:"solana_provider_config"});return{signature:await new H(m.rpcTarget).sendRawTransaction(i.serialize())}},signAllTransactions:async a=>{var r,i,t;if(!((r=a.params)!==null&&r!==void 0&&r.message)||!((i=a.params)!==null&&i!==void 0&&i.message.length))throw d.rpcErrors.invalidParams("message");const o=a.params.message,{length:c}=o,g=[];for(let p=0;p<c;p++){const f=o[p],W=C(f)?f.message.serialize():f.serializeMessage();g.push(u.encode(W))}const{msg:m,data:w}=await n.signAllTransactions(g);if(!w.publicKey||((t=w.signatures)===null||t===void 0?void 0:t.length)!==c)throw new Error(m);const v=new M(w.publicKey);for(let p=0;p<c;p++){const f=u.decode(w.signatures[p]);o[p].addSignature(v,Buffer.from(f))}return o}});class ue extends k{getProviderHandlers(e){return j(e,this.getProviderEngineProxy.bind(this))}}const ee=(n,e)=>{const s=z(n);return s.signAndSendTransaction=async a=>{const r=e();if(!r)throw d.providerErrors.custom({message:"Provider is not initialized",code:4902});const i=await n.signTransaction(a.params.message),t=await r.request({method:"solana_provider_config"});return{signature:await new H(t.rpcTarget).sendRawTransaction(i.serialize())}},s.signMessage=async a=>await n.signMessage(a.params.message,a.params.display),s};class le extends k{getProviderHandlers(e){return ee(e,this.getProviderEngineProxy.bind(this))}}const se=n=>({requestAccounts:async()=>await n.request({method:"solana_requestAccounts",params:{}}),getAccounts:async()=>await n.request({method:"solana_requestAccounts",params:{}}),getPrivateKey:async()=>{throw d.rpcErrors.methodNotSupported()},getSecretKey:async()=>{throw d.rpcErrors.methodNotSupported()},signMessage:async s=>{var a;if(!((a=s.params)!==null&&a!==void 0&&a.message))throw d.rpcErrors.invalidParams("message");return await n.signMessage(s.params.message)},signTransaction:async s=>{var a;if(!((a=s.params)!==null&&a!==void 0&&a.message))throw d.rpcErrors.invalidParams("message");const r=s.params.message;return await n.signTransaction(r)},signAndSendTransaction:async s=>{var a;if(!((a=s.params)!==null&&a!==void 0&&a.message))throw d.rpcErrors.invalidParams("message");const r=s.params.message;return{signature:await n.sendTransaction(r)}},signAllTransactions:async s=>{var a,r;if(!((a=s.params)!==null&&a!==void 0&&a.message)||!((r=s.params)!==null&&r!==void 0&&r.message.length))throw d.rpcErrors.invalidParams("message");const i=s.params.message;return await n.signAllTransactions(i)}});class pe extends K{constructor(e){let{config:s,state:a}=e;super({config:{chainConfig:h(h({},s.chainConfig),{},{chainNamespace:A.SOLANA})},state:a})}async switchChain(e){await this.provider.request({method:"switchSolanaChain",params:[{chainId:e.chainId}]})}async addChain(e){super.addChain(e),await this.provider.request({method:"addNewChainConfig",params:[{chainId:e.chainId,chainName:e.displayName,rpcUrls:[e.rpcTarget],blockExplorerUrls:[e.blockExplorer],nativeCurrency:{name:e.tickerName,symbol:e.ticker,decimals:e.decimals||18}}]})}async setupProvider(e){this.handleInjectedProviderUpdate(e),await this.setupEngine(e)}async lookupNetwork(){if(!this.provider)throw d.providerErrors.custom({message:"Torus solana provider is not initialized",code:4902});const{chainId:e}=this.config.chainConfig,s=await this.provider.request({method:"solana_chainId"}),a=b(s.toString())?s:`0x${parseInt(s,10).toString(16)}`;if(e!==a)throw x.rpcConnectionError(`Invalid network, net_version is: ${a}, expected: ${e}`);return this.update({chainId:a}),this.emit("connect",{chainId:this.state.chainId}),this.emit("chainChanged",this.state.chainId),this.state.chainId}async setupEngine(e){const s=se(e),a=_(s),r=B(e),i=new T;i.push(a),i.push(r);const t=I(i);this.updateProviderEngineProxy(t),await this.lookupNetwork()}async handleInjectedProviderUpdate(e){e.on("accountsChanged",async s=>{this.emit("accountsChanged",s)}),e.on("chainChanged",async s=>{const a=b(s)?s:`0x${parseInt(s,10).toString(16)}`;this.configure({chainConfig:h(h({},this.config.chainConfig),{},{chainId:a})}),await this.setupProvider(e)})}}async function ae(n){let{privKey:e,getProviderEngineProxy:s}=n;const a=()=>D.fromSecretKey(Buffer.from(e,"hex"));if(typeof e!="string")throw x.invalidParams("privKey must be a string");const r=a();return{requestAccounts:async()=>[r.publicKey.toBase58()],getAccounts:async()=>[r.publicKey.toBase58()],getPrivateKey:async()=>e,getSecretKey:async()=>u.encode(r.secretKey),signTransaction:async t=>{var o;if(!((o=t.params)!==null&&o!==void 0&&o.message))throw d.rpcErrors.invalidParams("message");const c=t.params.message;return c.version!==void 0||c instanceof E?c.sign([r]):c.partialSign(r),c},signMessage:async t=>{var o;if(!((o=t.params)!==null&&o!==void 0&&o.message))throw d.rpcErrors.invalidParams("message");return N.sign.detached(t.params.message,r.secretKey)},signAndSendTransaction:async t=>{var o;if(!((o=t.params)!==null&&o!==void 0&&o.message))throw d.rpcErrors.invalidParams("message");const c=s();if(!c)throw d.providerErrors.custom({message:"Provider is not initialized",code:4902});const g=t.params.message;return g.version!==void 0||g instanceof E?g.sign([r]):g.partialSign(r),{signature:await c.request({method:"sendTransaction",params:[Buffer.from(g.serialize()).toString("base64"),{encoding:"base64",preflightCommitment:"confirmed"}]})}},signAllTransactions:async t=>{var o,c,g;if(!((o=t.params)!==null&&o!==void 0&&o.message)||!((c=t.params)!==null&&c!==void 0&&c.message.length))throw d.rpcErrors.invalidParams("message");const m=(g=t.params)===null||g===void 0?void 0:g.message;for(const w of m||[]){const v=w;v.version!==void 0||v instanceof E?v.sign([r]):v.partialSign(r)}return m}}}var U;class R extends K{constructor(e){let{config:s,state:a}=e;super({config:{chainConfig:h(h({},s.chainConfig),{},{chainNamespace:A.SOLANA})},state:a})}async enable(){if(!this.state.privateKey)throw d.providerErrors.custom({message:"Private key is not found in state, plz pass it in constructor state param",code:4902});return await this.setupProvider(this.state.privateKey),this._providerEngineProxy.request({method:"eth_accounts"})}getEd25519Key(e){return F(e).sk.toString("hex").padStart(128,"0")}async setupProvider(e){const s=await ae({privKey:e,getProviderEngineProxy:this.getProviderEngineProxy.bind(this)}),a=_(s),r=new T,{networkMiddleware:i}=V(this.config.chainConfig);r.push(this.getChainSwitchMiddleware()),r.push(this.getAccountMiddleware()),r.push(a),r.push(i);const t=I(r);this.updateProviderEngineProxy(t),await this.lookupNetwork()}async updateAccount(e){if(!this._providerEngineProxy)throw d.providerErrors.custom({message:"Provider is not initialized",code:4902});await this._providerEngineProxy.request({method:"solanaPrivateKey"})!==e.privateKey&&(await this.setupProvider(e.privateKey),this.emit("accountsChanged",{accounts:await this._providerEngineProxy.request({method:"requestAccounts"})}))}async switchChain(e){if(!this._providerEngineProxy)throw d.providerErrors.custom({message:"Provider is not initialized",code:4902});const s=this.getChainConfig(e.chainId);this.update({chainId:"loading"}),this.configure({chainConfig:s});const a=await this._providerEngineProxy.request({method:"solanaPrivateKey"});await this.setupProvider(a)}async lookupNetwork(){if(!this._providerEngineProxy)throw d.providerErrors.custom({message:"Provider is not initialized",code:4902});const e=await this._providerEngineProxy.request({method:"getHealth",params:[]}),{chainConfig:s}=this.config;if(e!=="ok")throw x.rpcConnectionError(`Failed to lookup network for following rpc target: ${s.rpcTarget}`);return this.update({chainId:s.chainId}),this.state.chainId!==s.chainId&&(this.emit("chainChanged",this.state.chainId),this.emit("connect",{chainId:this.state.chainId})),this.state.chainId}getChainSwitchMiddleware(){return Y({addNewChainConfig:async a=>{if(!a.params)throw d.rpcErrors.invalidParams("Missing request params");const{chainId:r,chainName:i,rpcUrls:t,blockExplorerUrls:o,nativeCurrency:c}=a.params;if(!r)throw d.rpcErrors.invalidParams("Missing chainId in chainParams");if(!t||t.length===0)throw d.rpcErrors.invalidParams("Missing rpcUrls in chainParams");if(!c)throw d.rpcErrors.invalidParams("Missing nativeCurrency in chainParams");this.addChain({chainNamespace:A.SOLANA,chainId:r,ticker:(c==null?void 0:c.symbol)||"SOL",tickerName:(c==null?void 0:c.name)||"Solana",displayName:i,rpcTarget:t[0],blockExplorer:(o==null?void 0:o[0])||"",decimals:(c==null?void 0:c.decimals)||9})},switchSolanaChain:async a=>{if(!a.params)throw d.rpcErrors.invalidParams("Missing request params");if(!a.params.chainId)throw d.rpcErrors.invalidParams("Missing chainId");await this.switchChain(a.params)}})}getAccountMiddleware(){return Z({updatePrivatekey:async s=>{if(!s.params)throw d.rpcErrors.invalidParams("Missing request params");if(!s.params.privateKey)throw d.rpcErrors.invalidParams("Missing privateKey");const{privateKey:a}=s.params;await this.updateAccount({privateKey:a})}})}}U=R;q(R,"getProviderInstance",async n=>{const e=new U({config:{chainConfig:n.chainConfig}});return await e.setupProvider(n.privKey),e});class he{constructor(e){q(this,"provider",void 0),this.provider=e}async requestAccounts(){return await this.provider.request({method:"requestAccounts"})}async signAndSendTransaction(e){const{signature:s}=await this.provider.request({method:"signAndSendTransaction",params:{message:e}});return{signature:s}}async signTransaction(e){return await this.provider.request({method:"signTransaction",params:{message:e}})}async signAllTransactions(e){return await this.provider.request({method:"signAllTransactions",params:{message:e}})}async signMessage(e){return await this.provider.request({method:"signMessage",params:{message:e}})}async request(e){return await this.provider.request(e)}}export{ge as PhantomInjectedProvider,ue as SlopeInjectedProxyProvider,R as SolanaPrivateKeyProvider,he as SolanaWallet,le as SolflareInjectedProvider,pe as TorusInjectedProvider};
